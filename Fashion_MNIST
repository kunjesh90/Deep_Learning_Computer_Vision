import zipfile
import pandas as pd
import numpy as np
from PIL import Image
from io import StringIO

import cv2
import os

def load_images_from_folder(folder):
    images = []
    for filename in os.listdir('C:\\Users\\kunjeshparekh\\Desktop\\KP\\IMS\\py\\project\\Apparel_Classification\\nozip\\test'):
        img = cv2.imread(os.path.join(folder,filename))
        if img is not None:
            images.append(img)
    return images

archive = zipfile.ZipFile('C:\\Users\\kunjeshparekh\\Desktop\\KP\\IMS\\py\\project\\Apparel_Classification\\train.zip', 'r')
train=pd.read_csv(archive.open('train.csv'))
train.info()
train.head()

img_data = Image.open(archive.read('train/1.png'))


import base64
encoded = base64.b64encode(open("C:\\Users\\kunjeshparekh\\Desktop\\KP\\IMS\\py\\project\\Apparel_Classification\\68779.png", "rb").read())

import binascii

x=binascii.b2a_hex(img_data)

%pylab inline
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
img = mpimg.imread('C:/Users/kunjeshparekh/Desktop/KP/IMS/py/project/Apparel_Classification/68779.png')
imgplot = plt.imshow(img)
plt.show()

with open('image.jpg', 'wb') as image_file:
    image_file.write(dx)



from scipy import misc
import glob

for image_path in glob.glob("C:/Users/kunjeshparekh/Desktop/KP/IMS/py/project/Apparel_Classification/*.png"):
    image = misc.imread(image_path)
    print image.shape
    print image.dtype


'''
How to list zipfile 
with zipfile.ZipFile('C:\\Users\\kunjeshparekh\\Desktop\\KP\\IMS\\py\\project\\Apparel_Classification\\train.zip', 'r') as zipObj:
   # Get list of files names in zip
   listOfiles = zipObj.namelist()
   for elem in listOfiles:
       print(elem)
listOfiles.head()
'''
TRAINING_DIR = "C://Users//kunjeshparekh//Desktop//KP//IMS//py//project//Apparel_Classification//nozip//test"
training_datagen = ImageDataGenerator(
      rescale = 1./255,
	    rotation_range=40,
      width_shift_range=0.2,
      height_shift_range=0.2,
      shear_range=0.2,
      zoom_range=0.2,
      horizontal_flip=True,
      fill_mode='nearest')



train_generator = training_datagen.flow_from_directory(
	TRAINING_DIR,
	target_size=(150,150),
	class_mode='categorical',
  batch_size=126
)

VALIDATION_DIR = "/tmp/rps-test-set/"
validation_datagen = ImageDataGenerator(rescale = 1./255)
validation_generator = validation_datagen.flow_from_directory(
	VALIDATION_DIR,
	target_size=(150,150),
	class_mode='categorical',
  batch_size=126
)

model = tf.keras.models.Sequential([
    # Note the input shape is the desired size of the image 150x150 with 3 bytes color
    # This is the first convolution
    tf.keras.layers.Conv2D(64, (3,3), activation='relu', input_shape=(150, 150, 3)),
    tf.keras.layers.MaxPooling2D(2, 2),
    # The second convolution
    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    # The third convolution
    tf.keras.layers.Conv2D(128, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    # The fourth convolution
    tf.keras.layers.Conv2D(128, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    # Flatten the results to feed into a DNN
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dropout(0.5),
    # 512 neuron hidden layer
    tf.keras.layers.Dense(512, activation='relu'),
    tf.keras.layers.Dense(3, activation='softmax')
])


model.summary()

model.compile(loss = 'categorical_crossentropy', optimizer='rmsprop', metrics=['accuracy'])

history = model.fit(train_generator, epochs=25, steps_per_epoch=20, validation_data = validation_generator, verbose = 1, validation_steps=3)

model.save("rps.h5")


import matplotlib.pyplot as plt
acc = history.history['accuracy']
val_acc = history.history['val_accuracy']
loss = history.history['loss']
val_loss = history.history['val_loss']

epochs = range(len(acc))


#New

import zipfile
import pandas as pd
import numpy as np
from PIL import Image
from io import StringIO

import cv2
import os

archive = zipfile.ZipFile('C:\\Users\\kunjeshparekh\\Desktop\\KP\\IMS\\py\\project\\Apparel_Classification\\train.zip', 'r')

df=pd.DataFrame()
for i in range(1,60001):
    with archive.open('train/'+str(i)+'.png') as file:
        img = Image.open(file).convert('L') #for 3D .convert('LA')
    #img.show()
        print(i)
        a=(np.asarray(img))
    #print(img.size, img.mode, len(img.getdata()))
        b=np.array(a).reshape((28*28,1))/256
        df=pd.concat([df,pd.DataFrame(b.T)],axis=0)

df.info()
#Data Setting
import os
os.getcwd()
os.chdir('C:\\Users\\kunjeshparekh\\Desktop\\KP\\IMS\\py\\project\\Apparel_Classification')
df.to_csv('train_pixel.csv',index=False)
df.info()

archive = zipfile.ZipFile('C:\\Users\\kunjeshparekh\\Desktop\\KP\\IMS\\py\\project\\Apparel_Classification\\test.zip', 'r')

df_test=pd.DataFrame()
for i in range(60001,70001):
    with archive.open('test/'+str(i)+'.png') as file:
        img = Image.open(file).convert('L') #for 3D .convert('LA')
    #img.show()
        print(i)
        a=(np.asarray(img))
    #print(img.size, img.mode, len(img.getdata()))
        b=np.array(a).reshape((28*28,1))/255
        df_test=pd.concat([df_test,pd.DataFrame(b.T)],axis=0)
import os
os.getcwd()
os.chdir('C:\\Users\\kunjeshparekh\\Desktop\\KP\\IMS\\py\\project\\Apparel_Classification')
df_test.to_csv('test_pixel.csv',index=False)
df_test.info()
train=pd.read_csv(archive.open('train.csv'))

#Classification Process
import zipfile
import os
import pandas as pd
os.getcwd()
os.chdir('C:\\Users\\kunjeshparekh\\Desktop\\KP\\IMS\\py\\project\\Apparel_Classification')
archive = zipfile.ZipFile('C:\\Users\\kunjeshparekh\\Desktop\\KP\\IMS\\py\\project\\Apparel_Classification\\train.zip', 'r')

train=pd.read_csv(archive.open('train.csv'))
train_img=pd.read_csv('train_pixel.csv')
test_img=pd.read_csv('test_pixel.csv')
test_img.columns


from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(train_img,train["label"], test_size=0.05)
import tensorflow as tf
from tensorflow import keras


model = keras.Sequential([
    
    keras.layers.Dense(256, activation='relu',input_shape=[len(X_train.columns)]),
    keras.layers.Dense(128, activation='relu',input_shape=[len(X_train.columns)]),
    keras.layers.Dense(64, activation='relu',input_shape=[len(X_train.columns)]),
    keras.layers.Dense(32, activation='relu',input_shape=[len(X_train.columns)]),
    #keras.layers.Dense(16, activation='relu',input_shape=[len(X_train.columns)]),
    #keras.layers.Dense(8, activation='relu',input_shape=[len(X_train.columns)]),
    keras.layers.Dense(10)
])

model.summary()

model.compile(optimizer='adam',
              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),metrics=['accuracy'])
model.fit(X_train, y_train, epochs=75)

probability_model = tf.keras.Sequential([model,tf.keras.layers.Softmax()])

predictions = probability_model.predict(test_img)

import numpy as np
op=np.argmax(predictions,axis=1)
(pd.DataFrame(op).iloc[:,0]).value_counts()
ans=pd.concat([pd.DataFrame([i for i in range(60001,70001)]),pd.DataFrame(op)],axis=1)
ans.columns = (['id','label'])
ans.to_csv("prediction.csv",index=False)
